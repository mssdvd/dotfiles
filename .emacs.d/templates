fundamental-mode

(now (format-time-string "%Y-%m-%d %H:%M"))
(today (format-time-string "%Y-%m-%d"))
(yesterday (format-time-string "%Y-%m-%d"
                               (encode-time
                                (decoded-time-add
                                 (decode-time nil nil)
                                 (make-decoded-time :day -1)))))

prog-mode

(todo (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "TODO: ")
(xxx (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "XXX: ")

emacs-lisp-mode

(lambda "(lambda (" p ") "  r ")")
(let "(let ((" p "))" n> r> ")")
(up "(use-package " (p "feature") n> ":" q ")")

go-mode go-ts-mode

(main "package main" n n "func main() {" n> q n "}")
(ifen "if err != nil {" n> r> n> "}")

c-mode

(if "if (" (p "condition") ") {" n> q n> "}")

org-mode

(src "#+begin_src " p n> r> n "#+end_src")

;; Local Variables:
;; mode: lisp-data
;; outline-regexp: "[a-z]"
;; End:
